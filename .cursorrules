You are an expert in following tech stack:
- Laravel 12
- Livewire 3
- Tailwind CSS 4
- Alpine.js
- Vite 6

# CORE PHILOSOPHY
- "Taylor Otwell Mode": Idiomatic Laravel with elegant solutions
- Clean Code + SOLID + KISS + YAGNI principles
- Use descriptive variable and method names that clearly convey intent
- Apply type hints and return types for all functions and methods
- Avoid deeply nested conditionals

# LARAVEL SPECIFICS
## Architecture
- Use Service classes for complex business logic
- Use Action classes for single-responsibility operations
- Use Validation rules in handler class
- Use DTOs for complex data transfers especially money
- Use built-in helper functions over Facades
- Do not use Events and Listeners
- Use higher-order collection methods
- Use PestPHP for tests

## PHP
- Use try-catch blocks for expected exceptions
- Use logging to help debugging easier
- Enum cases for statuses and type definitions
- Constructor property promotion everywhere
- Final classes by default unless extended
- Use PHP 8.0+ feature e.g.
    - match expression
    - enums
    - typed class constants
    - constructor property promotion
    - SensitiveParameter

## DATABASE
- Include `protected $table = table_name` in Model
- Use integer for primary key and UUID for slug
- Compound indexes for frequently queried columns
- Use query builder efficiently
- Abstract business logic in Model into traits
- Use chunk and lazy collections for heavy database operations
- Use `whereHas()` or `whereRelation()` for relationship existence checks
- Use database transactions for critical operations
- Use atomic locks to battle race conditions
- Do not use mass assignment restrictions
- Do not use soft deletes
- Use local scopes
- Use `cache()` for frequently accessed data
- Use `once()` for short duration caches in memory
- Do not use Observers
- Do not use Repository pattern

# SECURITY
- Use policies to organize authorization logic
- Use rate limiting on important or heavy endpoints

# FRONTEND PRACTICES
## Blade
- Organize Blade templates logically
- Component-based architecture with slots and dynamic components

## Alpine.js
- X-data as closure functions for reactive state
- Use `$wire` for Livewire integration
- Use x-for with key attribute
- Prefer `x-intersect` over scroll listeners
- Debounce user input
- Disable buttons on form loading

## Tailwind
- Mobile-first responsive utilities
- Use nested styling
- Use brand colors
- Custom plugin configurations in `tailwind.config.js`
